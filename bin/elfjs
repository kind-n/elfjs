#!/usr/bin/env node
"use strict";

/**
 * Usage: elfjs [command] [argv]
 * 
 * Options:
 *      -v, --version           output the version number
 *      -h, --help              output usage information
 * 
 * Commands
 *      init [name]             Initialize a project
 * 
 *      view [options] [argv]   Open the HTTP server
 *          -d, --dir   <path>       the directory
 *          -p, --port  <port>       the server port
 *          -c, --cache <term>       the cache max-age
 */

var fs     = require("fs");
var path   = require("path");
var zlib   = require("zlib");
var http   = require("http");
var https  = require("https");
var crypto = require("crypto");

var cmd    = require("commander");
var man    = require("minimatch");
var pkg    = require("../package.json");

var cwd    = process.cwd();
var cfg    = include(path.join(cwd, "elfjs.config.json")) || {};

//
//
//

function wronged (err) {
    console.log("");
    console.log("  error: " + err);
    console.log("");
}
function include (url) {
    if (fs.existsSync(url) &&
        fs.statSync(url).isFile()) {
        return require(url);
    }
}
function combine (obj) {
    var n;
    var i = 1;
    var l = arguments.length;
    for (; i < l; i++) {
        n = arguments[i];
        for (var p in n) {
            if (n[p] !== null &&
                n[p] !== void 0) {
                if (Array.isArray(n[p])) {
                    obj[p] = (obj[p] || []).concat(n[p]);
                } else if (typeof n[p] === "object") {
                    obj[p] = combine(obj[p] || {}, n[p]);
                } else {
                    obj[p] = n[p];
                }
            }
        }
    }
    return obj;
}
function readdir (val) {
    return new fwriter()
        .add(0, "<!DOCTYPE html>")
        .add(0, "<html>")
        .add(4, "<head>")
        .add(8, "<meta charset=\"UTF-8\">")
        .add(4, "</head>")
        .add(4, "<body>")
        .add(8, "<br>")
        .add(8, "<ul>")
        .add(0, val.map(function (i) { return "            <li><a href=\"" + i + "\">" + i + "</a></li>" }).join("\n"))
        .add(8, "</ul>")
        .add(4, "</body>")
        .add(0, "</html>")
        .val.slice(0, -1);
}
function fwriter (dir) {
    this.dir = dir ? path.join(cwd, dir) : cwd;
    this.val = "";
}
fwriter.prototype.add = function (numb, val) {
    while (numb--) {
        this.val += " ";
    }
    this.val += val || "";
    this.val += "\n";
    return this;
};
fwriter.prototype.mkd = function (name) {
    (function mkd (dir, callback) {
        if (fs.existsSync(dir)) {
            callback();
        } else {
            mkd(path.dirname(dir), function () {
                fs.mkdirSync(dir);
                callback();
            });
        }
    } (this.dir, function () {
        if (name) {
            name = path.join(this.dir, name);
            if (fs.existsSync(name) === false) {
                fs.writeFileSync(name, this.val.slice(0, -1));
            }
        }
    }.bind(this)));
};
function fserver (opt) {
    this.opt = combine({
        types : {
            "js"   : "text/javascript; charset=utf-8",
            "ts"   : "text/typescript; charset=utf-8",
            "md"   : "text/markdown; charset=utf-8",
            "txt"  : "text/plain; charset=utf-8",
            "css"  : "text/css; charset=utf-8",
            "xml"  : "text/xml; charset=utf-8",
            "html" : "text/html; charset=utf-8",
            "sass" : "text/css; charset=utf-8",
            "scss" : "text/css; charset=utf-8",
            "less" : "text/css; charset=utf-8",
            "json" : "application/json; charset=utf-8",
            "svg"  : "image/svg+xml; charset=utf-8",
            "bmp"  : "image/bmp",
            "gif"  : "image/gif",
            "jpg"  : "image/jpeg",
            "jpeg" : "image/jpeg",
            "webp" : "image/webp",
            "ico"  : "image/x-icon",
            "png"  : "image/png",
            "mp3"  : "audio/mpeg",
            "mp4"  : "video/mp4",
            "oga"  : "audio/ogg",
            "ogv"  : "video/ogg",
            "webm" : "video/webm",
            "wav"  : "audio/x-wav",
            "ogg"  : "application/ogg",
            "pdf"  : "application/pdf"
        },
        zlibs : {
            "js"   : true,
            "ts"   : true,
            "md"   : true,
            "txt"  : true,
            "css"  : true,
            "xml"  : true,
            "sass" : true,
            "scss" : true,
            "less" : true,
            "json" : true,
            "svg"  : true
        },
        https : {
            key  : null,
            cert : null,
            port : 443
        },
        route : null,
        cache : "no-cache",
        host : null,
        port : 8080,
        dir : ""
    }, cfg, opt);
    this.hwd = [];
}
fserver.prototype.use = function (url, hwd) {
    this.hwd.push({
        url : url,
        hwd : hwd
    });
};
fserver.prototype.end = function (url) {
    var opt = this.opt;
    var ext = path.extname(url)
                  .toLowerCase()
                  .slice(1);
    var uri = path.isAbsolute(url)
            ? url
            : path.join(cwd, opt.dir, url);
    var mimetype = opt.types[ext];
    var compress = opt.zlibs[ext];
    var conserve = opt.cache !== "no-cache";
    return function (req, res) {
        var method = req.method.toUpperCase();
        if (method !== "GET" &&
            method !== "HEAD") {
            res.statusCode = 405;
            res.end();
            return;
        }
        if (!mimetype) {
            res.statusCode = 415;
            res.end();
            return;
        }
        if (!fs.existsSync(uri)) {
            res.statusCode = 404;
            res.end();
            return;
        }
        var remark = fs.statSync(uri);
        if (!remark.isFile()) {
            res.statusCode = 403;
            res.end();
            return;
        }
        var ranges = req.headers["range"];
        var cmatch = req.headers["if-none-match"];
        var csince = req.headers["if-modified-since"];
        var coding = req.headers["accept-encoding"]
                   ? req.headers["accept-encoding"].trim().split(/[,\s]+/g)
                   : [];
        var length = remark.size;
        var charac = remark.mtime;
        var smatch = crypto.createHash("md5")
                           .update([remark.ino, remark.size, charac.getTime()].join("-"))
                           .digest("hex")
                           .toLowerCase();
        var ssince = charac.toUTCString();
        var slimit = new Date(charac.getTime() + 315360000000).toUTCString();
        res.setHeader("Content-Type", mimetype);
        if (length === 0 ||
            method === "HEAD") {
            res.setHeader("Content-Length", 0);
            res.statusCode = 200;
            res.end();
            return;
        }
        if (ranges) {
            var range = ranges.split(/bytes=([0-9]*)-([0-9]*)/);
            var start = parseInt(range[1]);
            var ended = parseInt(range[2]);
            if (isNaN(start) &&
                isNaN(ended)) {
                start = 0;
                ended = length - 1;
            } else if (isNaN(start)) {
                start = length - ended;
                ended = length - 1;
            } else if (isNaN(ended)) {
                ended = length - 1;
            }
            if ((start >= length) ||
                (ended >= length) ||
                (ended > start)) {
                res.statusCode = 416;
                res.setHeader("Content-Range", "bytes */" + length);
                res.end();
                return;
            }
            res.statusCode = 206;
            res.setHeader("Accept-Ranges", "bytes");
            res.setHeader("Cache-Control", "no-cache");
            res.setHeader("Content-Range", "bytes " + start + "-" + ended + "/" + length);
            res.setHeader("Content-Length", ended === start ? 0 : ended - start + 1);
            fs.createReadStream(uri, {
                start : start,
                end: ended
            }).pipe(res);
            return;
        }
        if (conserve) {
            res.setHeader("Etag", smatch);
            res.setHeader("Last-Modified", ssince);
            res.setHeader("Cache-Control", /^\d+$/.test(opt.cache) ? "max-age=" + opt.cache : opt.cache);
            res.setHeader("Expires", slimit);
            if (cmatch === smatch ||
                csince === ssince) {
                res.statusCode = 304;
                res.end();
                return;
            }
        }
        if (compress) {
            if (coding.indexOf("gzip") >= 0) {
                var buffer = zlib.gzipSync(fs.readFileSync(uri));
                res.statusCode = 200;
                res.setHeader("Content-Length", buffer.length);
                res.setHeader("Content-Encoding", "gzip");
                res.end(buffer);
                return;
            }
            if (coding.indexOf("deflate") >= 0) {
                var buffer = zlib.deflateSync(fs.readFileSync(uri));
                res.statusCode = 200;
                res.setHeader("Content-Length", buffer.length);
                res.setHeader("Content-Encoding", "deflate");
                res.end(buffer);
                return;
            }
        }
        res.statusCode = 200;
        res.setHeader("Content-Length", length);
        fs.createReadStream(uri).pipe(res);
    };
};

//
//
//

cmd.usage("[command] [argv]");
cmd.version(pkg.name + " " + pkg.version, "-v, --version");
cmd.command("init [name]")
    .description("Initialize a project")
    .action(function (name) {
        name = (name || path.basename(cwd));
        // README.md
        new fwriter()
            .add(0, "# " + name)
            .mkd("README.md");
        // package.json
        new fwriter()
            .add(0, "{")
            .add(4, "\"name\": \"" + name.replace(/[^\w-]+/g, "-").toLowerCase() + "\",")
            .add(4, "\"version\": \"1.0.0\",")
            .add(4, "\"description\": \"\",")
            .add(4, "\"dependencies\": {")
            .add(8, "\"elfjs\": \"~" + pkg.version + "\"")
            .add(4, "},")
            .add(4, "\"scripts\": {")
            .add(8, "\"start\": \"elfjs view -p 8080 -d src\"")
            .add(4, "}")
            .add(0, "}")
            .mkd("package.json");
        // elfjs.config.json
        new fwriter()
            .add(0, "{")
            .add(4, "\"types\": {},")
            .add(4, "\"zlibs\": {},")
            .add(4, "\"https\": {")
            .add(8, "\"key\": null,")
            .add(8, "\"cert\": null,")
            .add(8, "\"port\": 443")
            .add(4, "},")
            .add(4, "\"route\": null,")
            .add(4, "\"cache\": 0,")
            .add(4, "\"host\": \"localhost\",")
            .add(4, "\"port\": 8080,")
            .add(4, "\"dir\": \"src\"")
            .add(0, "}")
            .mkd("elfjs.config.json")
        // main.html
        new fwriter("src")
            .add(0, "<!DOCTYPE html>")
            .add(0, "<html>")
            .add(4, "<head>")
            .add(8, "<title>" + name + "</title>")
            .add(8, "<meta charset=\"UTF-8\">")
            .add(8, "<meta content=\"no-transform\" http-equiv=\"Cache-Control\">")
            .add(8, "<meta content=\"IE=edge,chrome=1\" http-equiv=\"X-UA-Compatible\">")
            .add(8, "<meta content=\"" + name + "\" name=\"description\">")
            .add(8, "<meta content=\"pc,mobile\" name=\"applicable-device\">")
            .add(8, "<link rel=\"stylesheet\" type=\"text/css\" href=\"./assets/stylesheets/base.css\">")
            .add(4, "</head>")
            .add(4, "<body>")
            .add(8, "<section>" + name + "</section>")
            .add(0, "")
            .add(8, "<script defer type=\"text/javascript\" src=\"./jskits/elfjs/dist/elf.min.js\"></script>")
            .add(8, "<script defer type=\"text/javascript\" src=\"./jskits/elfjs/dist/exts/elf-loader.min.js\"></script>")
            .add(8, "<!--[if IE 9]> <script defer type=\"text/javascript\" src=\"./jskits/elfjs/dist/shims/shims_for_IE9.min.js\"></script> <![endif]-->")
            .add(8, "<!--[for lib]> <script defer type=\"text/javascript\" src=\"./jskits/elfjs/dist/shims/shims_for_Lib.min.js\"></script> <![ended]-->")
            .add(8, "<script defer type=\"text/javascript\" src=\"./assets/javascripts/app.js\" data-main=\"/bootstraps/main.js\"></script>")
            .add(4, "</body>")
            .add(0, "</html>")
            .mkd("main.html");
        // main.js
        new fwriter("src/bootstraps")
            .add(0, "module.exports = require(\"../components/welcome\")();")
            .mkd("main.js");
        // welcome.js
        new fwriter("src/components")
            .add(0, "module.exports = function() {")
            .add(4, "alert(\"Welcome!\");")
            .add(0, "};")
            .mkd("welcome.js")
        // base.css
        new fwriter("src/assets/stylesheets")
            .add(0, "@charset \"UTF-8\";")
            .add(0, "")
            .add(0, "html {")
            .add(4, "height: 100%;")
            .add(0, "}")
            .mkd("base.css");
        // app.js
        new fwriter("src/assets/javascripts")
            .add(0, "/**")
            .add(0, " *")
            .add(0, " * @description Simple load helper for development")
            .add(0, " *")
            .add(0, " */")
            .add(0, "\"use strict;\"")
            .add(0, "")
            .add(0, "!(function (Elf) {")
            .add(0, "var current = document.currentScript || (function (scripts) {")
            .add(4, "var i = 0, l = scripts.length;")
            .add(4, "for (; i < l; i++) {")
            .add(8, "if (scripts[i].readyState === \"interactive\") {")
            .add(12,"return scripts[i];")
            .add(8, "}")
            .add(4, "}")
            .add(4, "return scripts[l - 1];")
            .add(0, "} (document.getElementsByTagName(\"script\")));")
            .add(0, "var extname = current.getAttribute(\"data-defaultExtension\") || \"js\";")
            .add(0, "var ingress = current.getAttribute(\"data-main\");")
            .add(0, "var baseURL = dirname(location.href);")
            .add(0, "var libsURL = dirname(current.src);")
            .add(0, "Elf.config({")
            .add(4, "baseURL: baseURL,")
            .add(4, "mapping: {")
            .add(8, "// Inserting the <script> tag in the HTML file can speed up the load.")
            .add(8, "babel: libsURL + \"libs/compiler/babel.js\",")
            .add(8, "less : libsURL + \"libs/compiler/style.less.js\",")
            .add(8, "sass : libsURL + \"libs/compiler/style.sass.js\",")
            .add(8, "ts   : libsURL + \"libs/compiler/typescript.js\"")
            .add(4, "},")
            .add(4, "defaultExtension: extname")
            .add(0, "});")
            .add(0, "if (ingress) {")
            .add(4, "Elf.require(ingress);")
            .add(0, "}")
            .add(0, "function dirname (v) {")
            .add(4, "return v.replace(/[?#].*$/, \"\").replace(/[^\\/]+$/, \"\");")
            .add(0, "}")
            .add(0, "} (Elf));")
            .mkd("app.js");
    });
cmd.command("view [argv]")
    .description("Open the HTTP server")
    .option("-d, --dir <path>", "the directory")
    .option("-p, --port <port>", "the server port")
    .option("-c, --cache <term>", "the cache max-age")
    .action(function (name, opt) {
        var server = new fserver({
            cache : opt.cache,
            port  : parseInt(opt.port) || null,
            dir   : opt.dir
        });
        if (server.opt.route) {
            var route = path.join(cwd, server.opt.route);
            if (fs.existsSync(route) &&
                fs.statSync(route).isFile()) {
                require(route)(server);
            }
        }
        server.use("/", function (url) {
            return function (req, res) {
                res.setHeader("Content-Type", "text/html; charset=utf-8");
                res.end(readdir(
                    fs.readdirSync(path.join(cwd, server.opt.dir))
                        .filter(function (value) {
                            return fs.statSync(path.join(cwd, server.opt.dir, value)).isFile()
                                && path.extname(value).toLowerCase() === ".html"
                        })
                        .sort()
                ));
            };
        });
        server.use("/jskits/**/*.*", function (url) {
            return server.end(path.join(cwd, url.replace(/^\/*jskits/, "node_modules")));
        });
        server.use("**", function (url) {
            return server.end(url);
        });
        if (server.opt.https &&
            server.opt.https.key &&
            server.opt.https.cert) {
            var path1 = path.join(cwd, server.opt.https.key);
            var path2 = path.join(cwd, server.opt.https.cert);
            if (!fs.existsSync(path1) ||
                !fs.existsSync(path2) ||
                !fs.statSync(path1).isFile() ||
                !fs.statSync(path2).isFile()) {
                wronged("Invalid configuration `https`");
                return;
            }
            https.createServer({
                key  : fs.readFileSync(path1),
                cert : fs.readFileSync(path2)
            }, function (req, res) {
                listener(req, res);
            }).listen(server.opt.https.port);
            http.createServer(function (req, res) {
                redirect(req, res);
            }).listen(server.opt.port);
        } else {
            http.createServer(function (req, res) {
                listener(req, res);
            }).listen(server.opt.port);
        }
        function listener (req, res) {
            try {
                var n;
                var i = 0;
                var l = server.hwd.length;
                var u = req.url.replace(/[?#].*$/, "");
                for (; i < l; i++) {
                    n = server.hwd[i];
                    if (man(u, n.url)) {
                        n.hwd(u.replace(/^\/+/, ""))(req, res);
                        return;
                    }
                }
                res.statusCode = 404;
                res.end();
            } catch (error) {
                res.statusCode = 500;
                res.end(error.message);
            }
        }
        function redirect (req, res) {
            try {
                var host = req.headers["host"]
                         ? req.headers["host"].replace(/:\d*.*$/, "")
                         : "localhost";
                if (server.opt.https) {
                    if (server.opt.host) {
                        host = server.opt.host;
                    }
                    if (server.opt.https.port !== 443) {
                        host = host + ":" + server.opt.https.port;
                    }
                }
                res.statusCode = 301;
                res.setHeader("Location", "https://" + host + req.url);
                res.end();
            } catch (error) {
                res.statusCode = 500;
                res.end(error.message);
            }
        }
    });
cmd.command("*", null, { noHelp: true })
    .action(function (cmd) {
        wronged("unknown command `" + cmd + "`");
    });
cmd.parse(process.argv);
