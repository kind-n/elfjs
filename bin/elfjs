#!/usr/bin/env node
"use strict";

/**
 * Usage: elfjs [command] [argv]
 * 
 * Options:
 *      -v, --version           output the version number
 *      -h, --help              output usage information
 * 
 * Commands
 *      init [name]             Initialize a project
 * 
 *      view [options] [argv]   Open the HTTP server
 *          -d, --dir   <path>       the directory
 *          -p, --port  <port>       the server port
 *          -c, --cache <term>       the cache max-age
 */

var fs        = require("fs");
var path      = require("path");
var zlib      = require("zlib");
var http      = require("http");
var https     = require("https");
var crypto    = require("crypto");

var commander = require("commander");
var minimatch = require("minimatch");

var cwd       = process.cwd();
var cfg       = include(path.join(cwd, "elfjs.config.json")) || {};
var pkg       = require("../package.json");

function wronged (err) {
    console.log("");
    console.log("  error: " + err);
    console.log("");
}
function include (url) {
    if (fs.existsSync(url) &&
        fs.statSync(url).isFile()) {
        return require(url);
    }
}
function combine (obj) {
    var n;
    var i = 1;
    var l = arguments.length;
    for (; i < l; i++) {
        n = arguments[i];
        for (var p in n) {
            if (n[p] !== null &&
                n[p] !== void 0) {
                if (Array.isArray(n[p])) {
                    obj[p] = (obj[p] || []).concat(n[p]);
                } else if (typeof n[p] === "object") {
                    obj[p] = combine(obj[p] || {}, n[p]);
                } else {
                    obj[p] = n[p];
                }
            }
        }
    }
    return obj;
}
function arrange (val) {
    var result = [];
    for (var i = 0; i < val.length; i++) {
        entry(val[i].charAt(0).toUpperCase()).push(val[i]);
    }
    return new FWriter()
        .add(0, "<!DOCTYPE html>")
        .add(0, "<html>")
        .add(1, "<head>")
        .add(2, "<meta charset=\"UTF-8\">")
        .add(2, "<meta content=\"no-transform\" http-equiv=\"Cache-Control\">")
        .add(2, "<meta content=\"IE=edge,chrome=1\" http-equiv=\"X-UA-Compatible\">")
        .add(2, "<meta content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" name=\"viewport\">")
        .add(2, "<meta content=\"pc,mobile\" name=\"applicable-device\">")
        .add(2, "<style type=\"text/css\">")
        .add(3, "html {")
        .add(4, "height: 100%;")
        .add(4, "}")
        .add(4, "body {")
        .add(4, "margin: 0;")
        .add(4, "min-height: 100%;")
        .add(4, "background: linear-gradient(#FFF, #EEE);")
        .add(4, "font: 16px/1.25 Helvetica, monospace, \\5b8b\\4f53, sans-serif;")
        .add(4, "color: #333;")
        .add(3, "}")
        .add(3, "section {")
        .add(4, "width: 86%;")
        .add(4, "max-width: 1600px;")
        .add(4, "overflow: hidden;")
        .add(4, "margin: 0 auto;")
        .add(3, "}")
        .add(3, "a {")
        .add(4, "color: inherit;")
        .add(4, "line-height: 2em;")
        .add(4, "text-decoration: none;")
        .add(3, "}")
        .add(3, "a:hover {")
        .add(4, "text-decoration: underline;")
        .add(3, "}")
        .add(2, "</style>")
        .add(1, "</head>")
        .add(1, "<body>")
        .add(2, "<section>")
        .add(0, result.map(function (item) {
            return [
                padStart(4 * 4, "<h1>" + item.first +  "</h1>"),
                padStart(4 * 4, "<ul>")
            ].concat(
                item.value.map(function (item) {
                    return padStart(5 * 4, "<li><a href=\"/" + item + "\">" + item + "</a></li>")
                })
            ).concat([
                padStart(4 * 4, "</ul>")
            ]).join("\n");
        }))
        .add(2, "</section>")
        .add(1, "</body>")
        .add(0, "</html>")
        .val.slice(0, -1);

    function entry (sn) {
        for (var i = 0; i < result.length; i++) {
            if (result[i].first === sn) {
                return result[i].value;
            }
        }
        var entry = {
            first : sn,
            value : []
        };
        result.push(entry);
        return entry.value;
    }
}
function copydir (origin, target) {
    if (fs.existsSync(origin) &&
        fs.existsSync(target)) {
        fs.readdirSync(origin).forEach(function (name) {
            var origin0 = path.join(origin, name);
            var target0 = path.join(target, name);
            var stat = fs.statSync(origin0);
            var make = fs.existsSync(target0) === false;
            if (stat.isDirectory()) {
                if (make) {
                    fs.mkdirSync(target0);
                }
                copydir(origin0, target0);
            } else if (stat.isFile()) {
                if (make) {
                    fs.copyFileSync(origin0, target0);
                }
            }
        });
    }
}
function padStart (numb, val) {
    for (var i = 0; i < numb; i++) {
        val = " " + val;
    }
    return val;
}

var FWriter = (function () {
    function FWriter (dir) {
        this.dir = dir ? path.resolve(dir) : cwd;
        this.val = "";
    }
    FWriter.prototype.add = function (tabs, val) {
        this.val += padStart(tabs * 4, val) + "\n";
        return this;
    };
    FWriter.prototype.mkd = function (name) {
        (function mkd (dir, callback) {
            if (fs.existsSync(dir)) {
                callback();
            } else {
                mkd(path.dirname(dir), function () {
                    fs.mkdirSync(dir);
                    callback();
                });
            }
        } (this.dir, function () {
            name = path.join(this.dir, name);
            if (fs.existsSync(name) === false) {
                fs.writeFileSync(name, this.val.slice(0, -1));
            }
        }.bind(this)));
    };
    return FWriter;
} ());
var FServer = (function () {
    function FServer (opt) {
        this.opt = combine({
            types : {
                "js"   : "text/javascript; charset=utf-8",
                "ts"   : "text/typescript; charset=utf-8",
                "md"   : "text/markdown; charset=utf-8",
                "txt"  : "text/plain; charset=utf-8",
                "css"  : "text/css; charset=utf-8",
                "xml"  : "text/xml; charset=utf-8",
                "html" : "text/html; charset=utf-8",
                "sass" : "text/css; charset=utf-8",
                "scss" : "text/css; charset=utf-8",
                "less" : "text/css; charset=utf-8",
                "json" : "application/json; charset=utf-8",
                "svg"  : "image/svg+xml; charset=utf-8",
                "bmp"  : "image/bmp",
                "gif"  : "image/gif",
                "jpg"  : "image/jpeg",
                "jpeg" : "image/jpeg",
                "webp" : "image/webp",
                "ico"  : "image/x-icon",
                "png"  : "image/png",
                "mp3"  : "audio/mpeg",
                "mp4"  : "video/mp4",
                "oga"  : "audio/ogg",
                "ogv"  : "video/ogg",
                "webm" : "video/webm",
                "wav"  : "audio/x-wav",
                "ogg"  : "application/ogg",
                "pdf"  : "application/pdf"
            },
            zlibs : {
                "js"   : true,
                "ts"   : true,
                "md"   : true,
                "txt"  : true,
                "css"  : true,
                "xml"  : true,
                "sass" : true,
                "scss" : true,
                "less" : true,
                "json" : true,
                "svg"  : true
            },
            https : {
                key  : null,
                cert : null,
                port : 443
            },
            route : null,
            cache : "no-cache",
            host : null,
            port : 8080,
            dir : ""
        }, cfg, opt);
        this.hwd = [];
    }
    FServer.prototype.use = function (url, hwd) {
        this.hwd.push({
            url : url,
            hwd : hwd
        });
    };
    FServer.prototype.end = function (url) {
        var opt = this.opt;
        var ext = path.extname(url).toLowerCase().slice(1);
        if (path.isAbsolute(url) === false) {
            url = path.join(cwd, opt.dir, url);
        }
        var mimetype = opt.types[ext];
        var compress = opt.zlibs[ext];
        var conserve = opt.cache !== "no-cache";
        return function (req, res) {
            var method = req.method.toUpperCase();
            if (method !== "GET" &&
                method !== "HEAD") {
                res.statusCode = 405;
                res.end("Method Not Allowed");
                return;
            }
            if (!mimetype) {
                res.statusCode = 415;
                res.end("Unsupported Media Type");
                return;
            }
            if (!fs.existsSync(url)) {
                res.statusCode = 404;
                res.end("Not Found");
                return;
            }
            var remark = fs.statSync(url);
            if (!remark.isFile()) {
                res.statusCode = 403;
                res.end("Forbidden");
                return;
            }
            var ranges = req.headers["range"];
            var cmatch = req.headers["if-none-match"];
            var csince = req.headers["if-modified-since"];
            var coding = req.headers["accept-encoding"]
                    ? req.headers["accept-encoding"].trim().split(/[,\s]+/g)
                    : [];
            var length = remark.size;
            var charac = remark.mtime;
            var smatch = crypto.createHash("md5")
                            .update([remark.ino, remark.size, charac.getTime()].join("-"))
                            .digest("hex")
                            .toLowerCase();
            var ssince = charac.toUTCString();
            var slimit = new Date(charac.getTime() + 315360000000).toUTCString();
            res.setHeader("Content-Type", mimetype);
            if (length === 0 ||
                method === "HEAD") {
                res.setHeader("Content-Length", 0);
                res.statusCode = 200;
                res.end();
                return;
            }
            if (ranges) {
                var range = ranges.split(/bytes=([0-9]*)-([0-9]*)/);
                var start = parseInt(range[1]);
                var ended = parseInt(range[2]);
                if (isNaN(start) &&
                    isNaN(ended)) {
                    start = 0;
                    ended = length - 1;
                } else if (isNaN(start)) {
                    start = length - ended;
                    ended = length - 1;
                } else if (isNaN(ended)) {
                    ended = length - 1;
                }
                if ((start >= length) ||
                    (ended >= length) ||
                    (ended > start)) {
                    res.statusCode = 416;
                    res.setHeader("Content-Range", "bytes */" + length);
                    res.end("Requested Range Not Satisfiable");
                    return;
                }
                res.statusCode = 206;
                res.setHeader("Accept-Ranges", "bytes");
                res.setHeader("Cache-Control", "no-cache");
                res.setHeader("Content-Range", "bytes " + start + "-" + ended + "/" + length);
                res.setHeader("Content-Length", ended === start ? 0 : ended - start + 1);
                fs.createReadStream(url, {
                    start : start,
                    end: ended
                }).pipe(res);
                return;
            }
            if (conserve) {
                res.setHeader("Etag", smatch);
                res.setHeader("Last-Modified", ssince);
                res.setHeader("Cache-Control", /^\d+$/.test(opt.cache) ? "max-age=" + opt.cache : opt.cache);
                res.setHeader("Expires", slimit);
                if (cmatch === smatch ||
                    csince === ssince) {
                    res.statusCode = 304;
                    res.end();
                    return;
                }
            }
            if (compress) {
                if (coding.indexOf("gzip") >= 0) {
                    var buffer = zlib.gzipSync(fs.readFileSync(url));
                    res.statusCode = 200;
                    res.setHeader("Content-Length", buffer.length);
                    res.setHeader("Content-Encoding", "gzip");
                    res.end(buffer);
                    return;
                }
                if (coding.indexOf("deflate") >= 0) {
                    var buffer = zlib.deflateSync(fs.readFileSync(url));
                    res.statusCode = 200;
                    res.setHeader("Content-Length", buffer.length);
                    res.setHeader("Content-Encoding", "deflate");
                    res.end(buffer);
                    return;
                }
            }
            res.statusCode = 200;
            res.setHeader("Content-Length", length);
            fs.createReadStream(url).pipe(res);
        };
    };
    return FServer;
} ());
commander.usage("[command] [argv]");
commander.version(pkg.name + " " + pkg.version, "-v, --version");
commander.command("init [name]")
    .description("Initialize a project")
    .action(function (name) {
        name = (name || path.basename(cwd));
        // README.md
        new FWriter()
            .add(0, "# " + name)
            .mkd("README.md");
        // package.json
        new FWriter()
            .add(0, "{")
            .add(1, "\"name\": \"" + name.replace(/[^\w-]+/g, "-").toLowerCase() + "\",")
            .add(1, "\"version\": \"1.0.0\",")
            .add(1, "\"description\": \"\",")
            .add(1, "\"dependencies\": {")
            .add(2, "\"elfjs\": \"~" + pkg.version + "\",")
            .add(2, "\"elfjs-common\": \"~2.0.0\",")
            .add(2, "\"elfjs-engine\": \"~2.0.0\",")
            .add(2, "\"elfjs-loader\": \"~2.0.0\",")
            .add(2, "\"elfjs-router\": \"~2.0.0\"")
            .add(1, "},")
            .add(1, "\"devDependencies\": {")
            .add(2, "\"glob\": \"~7.1.2\",")
            .add(2, "\"webpack\": \"~3.10.0\",")
            .add(2, "\"uglifyjs-webpack-plugin\": \"~1.1.6\",")
            .add(2, "\"clean-webpack-plugin\": \"~0.1.17\",")
            .add(2, "\"copy-webpack-plugin\": \"~4.3.1\",")
            .add(2, "\"html-loader\": \"~0.5.4\"")
            .add(1, "},")
            .add(1, "\"scripts\": {")
            .add(2, "\"build\": \"./node_modules/.bin/webpack\",")
            .add(2, "\"start\": \"./node_modules/.bin/elfjs view\"")
            .add(1, "}")
            .add(0, "}")
            .mkd("package.json");
        // copy website
        copydir(path.join(__dirname, "../web"), cwd);
    });
commander.command("view [argv]")
    .description("Open the HTTP server")
    .option("-d, --dir <path>", "the directory")
    .option("-p, --port <port>", "the server port")
    .option("-c, --cache <term>", "the cache max-age")
    .action(function (name, opt) {
        var server = new FServer({
            cache : opt.cache          || null,
            port  : parseInt(opt.port) || null,
            dir   : opt.dir            || null
        });
        var route = server.opt.route;
        if (typeof route === "string" && route.length > 0) {
            route = path.resolve(route);
            if (path.extname(route).toLowerCase() === ".js") {
                if (fs.existsSync(route) &&
                    fs.statSync(route).isFile()) {
                    var router = require(route);
                    if (typeof router === "function") {
                        router(server);
                    }
                }
            }
        }
        server.use("/", function (url) {
            return function (req, res) {
                var dir = path.join(cwd, server.opt.dir);
                var val = fs.readdirSync(dir).filter(function (item) {
                    return fs.statSync(path.join(dir, item)).isFile() && path.extname(item).toLowerCase() === ".html";
                });
                res.setHeader("Content-Type", "text/html; charset=utf-8");
                res.end(arrange(val.sort()));
            };
        });
        server.use("/node_modules/**/*.*", function (url) {
            return server.end(path.join(cwd, url));
        });
        server.use("**", function (url) {
            return server.end(url);
        });
        if (server.opt.https &&
            server.opt.https.key &&
            server.opt.https.cert) {
            var path1 = path.join(cwd, server.opt.https.key);
            var path2 = path.join(cwd, server.opt.https.cert);
            if (!fs.existsSync(path1) ||
                !fs.existsSync(path2) ||
                !fs.statSync(path1).isFile() ||
                !fs.statSync(path2).isFile()) {
                wronged("Invalid configuration `https`");
                return;
            }
            https.createServer({
                key  : fs.readFileSync(path1),
                cert : fs.readFileSync(path2)
            }, function (req, res) {
                listener(req, res);
            }).listen(server.opt.https.port);
            http.createServer(function (req, res) {
                redirect(req, res);
            }).listen(server.opt.port);
        } else {
            http.createServer(function (req, res) {
                listener(req, res);
            }).listen(server.opt.port);
        }
        function listener (req, res) {
            try {
                var n;
                var i = 0;
                var l = server.hwd.length;
                var u = req.url.replace(/[?#].*$/, "");
                for (; i < l; i++) {
                    n = server.hwd[i];
                    if (minimatch(u, n.url)) {
                        n.hwd(u.replace(/^\/+/, ""))(req, res);
                        return;
                    }
                }
                res.statusCode = 404;
                res.end("Not Found");
            } catch (error) {
                res.statusCode = 500;
                res.end(error.message);
            }
        }
        function redirect (req, res) {
            try {
                var host = req.headers["host"]
                         ? req.headers["host"].replace(/:\d*.*$/, "")
                         : "localhost";
                if (server.opt.https) {
                    if (server.opt.host) {
                        host = server.opt.host;
                    }
                    if (server.opt.https.port !== 443) {
                        host = host + ":" + server.opt.https.port;
                    }
                }
                res.statusCode = 301;
                res.setHeader("Location", "https://" + host + req.url);
                res.end();
            } catch (error) {
                res.statusCode = 500;
                res.end(error.message);
            }
        }
    });
commander.command("*", null, { noHelp: true })
    .action(function (cmd) {
        wronged("unknown command `" + cmd + "`");
    });
commander.parse(process.argv);